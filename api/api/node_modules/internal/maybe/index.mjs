function ensureError(input) {
  if (!(input instanceof Error)) {
    return new NonError(input)
  }

  const error = input;

  if (!error.name) {
    error.name = (error.constructor && error.constructor.name) || 'Error';
  }

  if (!error.message) {
    error.message = '<No error message>';
  }

  if (!error.stack) {
    error.stack = (new Error(error.message).stack || '').replace(/\n {4}at /, '\n<Original stack missing>$&');
  }

  return error
}

class NonError extends Error {
  constructor(message) {
    super(message || '<No error message>');
    this.name = 'NonError';
    Error.captureStackTrace(this, NonError);
  }
}

/**
 * Imports
 */

/**
 * Wrap a promise in another promise
 * that catches any rejects
 */

function maybe(promise) {
  return new Promise(function(resolve) {
    promise
      .then(function(value) {
        return resolve(value)
      })
      .catch(function(err) {
        return resolve(ensureError(err))
      });
  })
}

export default maybe;
