const toString = {}.toString;
const Node = typeof window != 'undefined' ? window.Node : Function; // could be any function




























/**
 * Return the type of `val`.
 *
 * @param {Mixed} val
 * @api public
 */

function type(x) {
  var type = typeof x;
  if (type != 'object') {
    return type
  }
  let otype = types[toString.call(x)];
  if (otype == 'object') {
    // in case they have been polyfilled
    if (x instanceof Map) return 'map'
    if (x instanceof Set) return 'set'
    return 'object'
  }
  if (otype) {
    return otype
  }
  if (x instanceof Node && 'nodeType' in x) {
    switch (x.nodeType) {
      case 1:
        return 'element'
      case 3:
        return 'text-node'
      case 9:
        return 'document'
      case 11:
        return 'document-fragment'
      default:
        return 'dom-node'
    }
  }
  throw new Error('internal/type: unhandled type: ' + x)
}

const types = {
  '[object Function]': 'function',
  '[object Date]': 'date',
  '[object RegExp]': 'regexp',
  '[object Arguments]': 'arguments',
  '[object Array]': 'array',
  '[object Set]': 'set',
  '[object String]': 'string',
  '[object Null]': 'null',
  '[object Undefined]': 'undefined',
  '[object Number]': 'number',
  '[object Boolean]': 'boolean',
  '[object Object]': 'object',
  '[object Map]': 'map',
  '[object Text]': 'text-node',
  '[object Uint8Array]': 'bit-array',
  '[object Uint16Array]': 'bit-array',
  '[object Uint32Array]': 'bit-array',
  '[object Uint8ClampedArray]': 'bit-array',
  '[object Error]': 'error',
  '[object FormData]': 'form-data',
  '[object File]': 'file',
  '[object Blob]': 'blob',
};

// @ts-nocheck

/**
 * Clones objects.
 *
 * @param {Mixed} any object
 * @api public
 */

function clone(obj) {
  let copy = null;

  switch (type(obj)) {
    case 'object':
      copy = {};
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          copy[key] = clone(obj[key]);
        }
      }
      return copy

    case 'array':
      copy = new Array(obj.length);
      for (var i = 0, l = obj.length; i < l; i++) {
        copy[i] = clone(obj[i]);
      }
      return copy

    case 'regexp':
      // from millermedeiros/amd-utils - MIT
      var flags = '';
      flags += obj.multiline ? 'm' : '';
      flags += obj.global ? 'g' : '';
      flags += obj.ignoreCase ? 'i' : '';
      return new RegExp(obj.source, flags)

    case 'date':
      return new Date(obj.getTime())

    default:
      // string, number, boolean, â€¦
      return obj
  }
}

export default clone;
