// types we can use











// store state and subscribe to changes
function Store(initial) {
  const subscribers = [];
  return Object.assign(initial, {
    subscribe(fn) {
      subscribers.push(fn);
    },
    unsubscribe(fn) {
      const i = subscribers.indexOf(fn);
      if (~i) subscribers.splice(i, 1);
    },
    setState(update) {
      update = typeof update === 'function' ? update(initial) : update;
      Object.assign(initial, update);
      for (let i = 0; i < subscribers.length; i++) {
        subscribers[i]();
      }
    },
    toJSON() {
      const shallowCopy = Object.assign({}, initial);
      // clear out the mixin
      delete shallowCopy['subscribe'];
      delete shallowCopy['unsubscribe'];
      delete shallowCopy['setState'];
      delete shallowCopy['toJSON'];
      return shallowCopy
    },
  })
}

export default Store;
