class Deferred {
  

  
   __init() {this.res = (_value) => {};}
   __init2() {this.rej = (_reason) => {};}

  constructor() {Deferred.prototype.__init.call(this);Deferred.prototype.__init2.call(this);
    this.promise = new Promise((resolve, reject) => {
      this.res = resolve;
      this.rej = reject;
    });
  }

  resolve(value) {
    return this.res(value)
  }

  reject(reason) {
    return this.rej(reason)
  }

  then(onfulfilled, onrejected) {
    return this.promise.then(onfulfilled, onrejected)
  }

  catch(onrejected) {
    return this.promise.catch(onrejected)
  }

  finally(onfinally) {
    return this.promise.finally(onfinally)
  }
}

export default Deferred;
