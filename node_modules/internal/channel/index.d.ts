export default class Channel<T> {
    private readonly capacity;
    private readonly values;
    private readonly sends;
    private recvs;
    private closed;
    /**
     * Initialize channel with the given buffer `capacity`. By default
     * the channel is unbuffered. A channel is basically a FIFO queue
     * for use with async/await or co().
     */
    constructor(capacity?: number);
    /**
     * Send value, blocking unless there is room in the buffer.
     *
     * Calls to send() on a closed buffer will error.
     */
    send(value: T): Promise<T | void>;
    /**
     * Receive returns a value or blocks until one is present.
     *
     * A recv() on a closed channel will return undefined.
     */
    recv(): Promise<T | void>;
    /**
     * Close the channel. Any pending recv() calls will be unblocked.
     *
     * Subsequent close() calls will throw.
     */
    close(): void;
}
